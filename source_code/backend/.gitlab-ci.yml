image: python:3.8-slim

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  HELM_MANIFEST_REPO: http://${GITLAB_USER_NAME}:${GITLAB_USER_PASSWORD}@colima/ecommerce/helm-manifest.git
  HELM_MANIFEST_BRANCH: main
  TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
  TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}

stages:
  - test
  - build
  - security
  - deploy
  - notify

# CI PASSED
# Testing
test:
  stage: test
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - python -m pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest.xml || true
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    when: always
    paths:
      - htmlcov/
      - coverage.xml
      - pytest.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: pytest.xml
    expire_in: 1 week
  cache:
    paths:
      - .pytest_cache/

# CI PASSED
lint:
  stage: test
  script:
    - pip install flake8 flake8-json flake8-html
    - flake8 --format=json --output-file=flake8-report.json . || true
    - flake8 --format=html --htmldir=flake8-report-html . || true
  artifacts:
    when: always
    paths:
      - flake8-report.json
      - flake8-report-html/
    reports:
      codequality: flake8-report.json
    expire_in: 1 week
  cache:
    paths:
      - .cache/

# Security Scanning
dependency-scan:
  stage: security
  script:
    - pip install safety
    - safety check --json > safety-report.json || true
    - pip freeze > requirements-lock.txt
  artifacts:
    when: always
    paths:
      - safety-report.json
      - requirements-lock.txt
    reports:
      dependency_scanning: safety-report.json
    expire_in: 1 month
  allow_failure: true

sast:
  stage: security
  variables:
    RUNNER_GENERATE_ARTIFACTS_METADATA: "false"
  script:
    - pip install bandit pylint
    - bandit -r . -f json -o bandit-report.json || true
    - pylint --output-format=json . > pylint-report.json || true
    - bandit -r . -f html -o bandit-report.html || true
  artifacts:
    when: always
    paths:
      - bandit-report.json
      - bandit-report.html
      - pylint-report.json
    expire_in: 1 month
  allow_failure: true

# Container Security
container-scan:
  image: 
    name: aquasec/trivy:latest
    entrypoint: [""]
  stage: security
  variables:
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  script:
    - trivy image --format json --output trivy-report.json backend:$CI_COMMIT_SHA || true
    - trivy image --format template --template "@contrib/html.tpl" -o trivy-report.html backend:$CI_COMMIT_SHA || true
  artifacts:
    when: always
    paths:
      - trivy-report.json
      - trivy-report.html
    reports:
      container_scanning: trivy-report.json
    expire_in: 1 month
  cache:
    paths:
      - .trivycache/
  allow_failure: true

# Build
build:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  script:
    - docker build -t backend:$CI_COMMIT_SHA .
    - docker tag backend:$CI_COMMIT_SHA colima:5000/backend:$CI_COMMIT_SHA
    - docker push colima:5000/backend:$CI_COMMIT_SHA

# Deploy
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache git yq
    - git config --global user.email "gitlab@example.com"
    - git config --global user.name "GitLab CI"
  script:
    - git clone $HELM_MANIFEST_REPO helm-manifest || exit 1
    - cd helm-manifest
    - |
      # Update backend image tag in values file
      if [ -f "values.yaml" ]; then
        yq e ".backend.image.tag = \"$CI_COMMIT_SHA\"" -i values.yaml
        # Verify the update
        if ! yq e ".backend.image.tag" values.yaml | grep -q "$CI_COMMIT_SHA"; then
          echo "Failed to update values.yaml"
          exit 1
        fi
      else
        echo "values.yaml not found at expected path"
        exit 1
      fi
    - |
      # Commit and push changes
      git add values.yaml
      git commit -m "Update backend image to $CI_COMMIT_SHA"
      git push origin $HELM_MANIFEST_BRANCH || {
        echo "Failed to push changes"
        exit 1
      }
  only:
    - main

# Notify
notify_success:
  stage: notify
  image: curlimages/curl:latest
  script:
    - |
      MESSAGE="✅ Backend Pipeline Success"
      curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$MESSAGE" \
        -d "parse_mode=HTML" || true
  rules:
    - when: on_success

notify_failure:
  stage: notify
  image: curlimages/curl:latest
  script:
    - |
      MESSAGE="❌ Backend Pipeline Failed"
      curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHAT_ID" \
        -d "text=$MESSAGE" \
        -d "parse_mode=HTML" || true
  rules:
    - when: on_failure